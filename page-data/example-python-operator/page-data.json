{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-python-operator","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-python-operator","title":"example_python_operator","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_python_operator\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_python_operator\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"Example DAG demonstrating the usage of the PythonOperator.\\\"\\\"\\\"\\nimport time\\nfrom pprint import pprint\\n\\nfrom airflow import DAG\\nfrom airflow.operators.python import PythonOperator, PythonVirtualenvOperator\\nfrom airflow.utils.dates import days_ago\\n\\nargs = {\\n    'owner': 'airflow',\\n}\\n\\ndag = DAG(\\n    dag_id='example_python_operator',\\n    default_args=args,\\n    schedule_interval=None,\\n    start_date=days_ago(2),\\n    tags=['example'],\\n)\\n\\n\\n# [START howto_operator_python]\\ndef print_context(ds, **kwargs):\\n    \\\"\\\"\\\"Print the Airflow context and ds variable from the context.\\\"\\\"\\\"\\n    pprint(kwargs)\\n    print(ds)\\n    return 'Whatever you return gets printed in the logs'\\n\\n\\nrun_this = PythonOperator(\\n    task_id='print_the_context',\\n    python_callable=print_context,\\n    dag=dag,\\n)\\n# [END howto_operator_python]\\n\\n\\n# [START howto_operator_python_kwargs]\\ndef my_sleeping_function(random_base):\\n    \\\"\\\"\\\"This is a function that will run within the DAG execution\\\"\\\"\\\"\\n    time.sleep(random_base)\\n\\n\\n# Generate 5 sleeping tasks, sleeping from 0.0 to 0.4 seconds respectively\\nfor i in range(5):\\n    task = PythonOperator(\\n        task_id='sleep_for_' + str(i),\\n        python_callable=my_sleeping_function,\\n        op_kwargs={'random_base': float(i) / 10},\\n        dag=dag,\\n    )\\n\\n    run_this >> task\\n# [END howto_operator_python_kwargs]\\n\\n\\n# [START howto_operator_python_venv]\\ndef callable_virtualenv():\\n    \\\"\\\"\\\"\\n    Example function that will be performed in a virtual environment.\\n\\n    Importing at the module level ensures that it will not attempt to import the\\n    library before it is installed.\\n    \\\"\\\"\\\"\\n    from time import sleep\\n\\n    from colorama import Back, Fore, Style\\n\\n    print(Fore.RED + 'some red text')\\n    print(Back.GREEN + 'and with a green background')\\n    print(Style.DIM + 'and in dim text')\\n    print(Style.RESET_ALL)\\n    for _ in range(10):\\n        print(Style.DIM + 'Please wait...', flush=True)\\n        sleep(10)\\n    print('Finished')\\n\\n\\nvirtualenv_task = PythonVirtualenvOperator(\\n    task_id=\\\"virtualenv_python\\\",\\n    python_callable=callable_virtualenv,\\n    requirements=[\\\"colorama==0.4.0\\\"],\\n    system_site_packages=False,\\n    dag=dag,\\n)\\n# [END howto_operator_python_venv]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_python_operator","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-python-operator","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}