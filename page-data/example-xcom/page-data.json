{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-xcom","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-xcom","title":"example_xcom","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_xcom\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_xcom\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"Example DAG demonstrating the usage of XComs.\\\"\\\"\\\"\\nfrom airflow import DAG\\nfrom airflow.operators.python import PythonOperator\\nfrom airflow.utils.dates import days_ago\\n\\ndag = DAG(\\n    'example_xcom',\\n    schedule_interval=\\\"@once\\\",\\n    start_date=days_ago(2),\\n    default_args={'owner': 'airflow'},\\n    tags=['example'],\\n)\\n\\nvalue_1 = [1, 2, 3]\\nvalue_2 = {'a': 'b'}\\n\\n\\ndef push(**kwargs):\\n    \\\"\\\"\\\"Pushes an XCom without a specific target\\\"\\\"\\\"\\n    kwargs['ti'].xcom_push(key='value from pusher 1', value=value_1)\\n\\n\\ndef push_by_returning(**kwargs):\\n    \\\"\\\"\\\"Pushes an XCom without a specific target, just by returning it\\\"\\\"\\\"\\n    return value_2\\n\\n\\ndef puller(**kwargs):\\n    \\\"\\\"\\\"Pull all previously pushed XComs and check if the pushed values match the pulled values.\\\"\\\"\\\"\\n    ti = kwargs['ti']\\n\\n    # get value_1\\n    pulled_value_1 = ti.xcom_pull(key=None, task_ids='push')\\n    if pulled_value_1 != value_1:\\n        raise ValueError(f'The two values differ {pulled_value_1} and {value_1}')\\n\\n    # get value_2\\n    pulled_value_2 = ti.xcom_pull(task_ids='push_by_returning')\\n    if pulled_value_2 != value_2:\\n        raise ValueError(f'The two values differ {pulled_value_2} and {value_2}')\\n\\n    # get both value_1 and value_2\\n    pulled_value_1, pulled_value_2 = ti.xcom_pull(key=None, task_ids=['push', 'push_by_returning'])\\n    if pulled_value_1 != value_1:\\n        raise ValueError(f'The two values differ {pulled_value_1} and {value_1}')\\n    if pulled_value_2 != value_2:\\n        raise ValueError(f'The two values differ {pulled_value_2} and {value_2}')\\n\\n\\npush1 = PythonOperator(\\n    task_id='push',\\n    dag=dag,\\n    python_callable=push,\\n)\\n\\npush2 = PythonOperator(\\n    task_id='push_by_returning',\\n    dag=dag,\\n    python_callable=push_by_returning,\\n)\\n\\npull = PythonOperator(\\n    task_id='puller',\\n    dag=dag,\\n    python_callable=puller,\\n)\\n\\npull << [push1, push2]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_xcom","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-xcom","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}