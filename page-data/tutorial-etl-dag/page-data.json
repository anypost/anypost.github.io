{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/tutorial-etl-dag","result":{"data":{"post":{"__typename":"MdxPost","slug":"/tutorial-etl-dag","title":"tutorial_etl_dag","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"tutorial_etl_dag\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"tutorial_etl_dag\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n# pylint: disable=missing-function-docstring\\n\\n\\\"\\\"\\\"\\n### ETL DAG Tutorial Documentation\\nThis ETL DAG is compatible with Airflow 1.10.x (specifically tested with 1.10.12) and is referenced\\nas part of the documentation that goes along with the Airflow Functional DAG tutorial located\\n[here](https://airflow.apache.org/tutorial_decorated_flows.html)\\n\\\"\\\"\\\"\\n# [START tutorial]\\n# [START import_module]\\nimport json\\n\\n# The DAG object; we'll need this to instantiate a DAG\\nfrom airflow import DAG\\n\\n# Operators; we need this to operate!\\nfrom airflow.operators.python import PythonOperator\\nfrom airflow.utils.dates import days_ago\\n\\n# [END import_module]\\n\\n# [START default_args]\\n# These args will get passed on to each operator\\n# You can override them on a per-task basis during operator initialization\\ndefault_args = {\\n    'owner': 'airflow',\\n}\\n# [END default_args]\\n\\n# [START instantiate_dag]\\nwith DAG(\\n    'tutorial_etl_dag',\\n    default_args=default_args,\\n    description='ETL DAG tutorial',\\n    schedule_interval=None,\\n    start_date=days_ago(2),\\n    tags=['example'],\\n) as dag:\\n    # [END instantiate_dag]\\n    # [START documentation]\\n    dag.doc_md = __doc__\\n    # [END documentation]\\n\\n    # [START extract_function]\\n    def extract(**kwargs):\\n        ti = kwargs['ti']\\n        data_string = '{\\\"1001\\\": 301.27, \\\"1002\\\": 433.21, \\\"1003\\\": 502.22}'\\n        ti.xcom_push('order_data', data_string)\\n\\n    # [END extract_function]\\n\\n    # [START transform_function]\\n    def transform(**kwargs):\\n        ti = kwargs['ti']\\n        extract_data_string = ti.xcom_pull(task_ids='extract', key='order_data')\\n        order_data = json.loads(extract_data_string)\\n\\n        total_order_value = 0\\n        for value in order_data.values():\\n            total_order_value += value\\n\\n        total_value = {\\\"total_order_value\\\": total_order_value}\\n        total_value_json_string = json.dumps(total_value)\\n        ti.xcom_push('total_order_value', total_value_json_string)\\n\\n    # [END transform_function]\\n\\n    # [START load_function]\\n    def load(**kwargs):\\n        ti = kwargs['ti']\\n        total_value_string = ti.xcom_pull(task_ids='transform', key='total_order_value')\\n        total_order_value = json.loads(total_value_string)\\n\\n        print(total_order_value)\\n\\n    # [END load_function]\\n\\n    # [START main_flow]\\n    extract_task = PythonOperator(\\n        task_id='extract',\\n        python_callable=extract,\\n    )\\n    extract_task.doc_md = \\\"\\\"\\\"\\\\\\n#### Extract task\\nA simple Extract task to get data ready for the rest of the data pipeline.\\nIn this case, getting data is simulated by reading from a hardcoded JSON string.\\nThis data is then put into xcom, so that it can be processed by the next task.\\n\\\"\\\"\\\"\\n\\n    transform_task = PythonOperator(\\n        task_id='transform',\\n        python_callable=transform,\\n    )\\n    transform_task.doc_md = \\\"\\\"\\\"\\\\\\n#### Transform task\\nA simple Transform task which takes in the collection of order data from xcom\\nand computes the total order value.\\nThis computed value is then put into xcom, so that it can be processed by the next task.\\n\\\"\\\"\\\"\\n\\n    load_task = PythonOperator(\\n        task_id='load',\\n        python_callable=load,\\n    )\\n    load_task.doc_md = \\\"\\\"\\\"\\\\\\n#### Load task\\nA simple Load task which takes in the result of the Transform task, by reading it\\nfrom xcom and instead of saving it to end user review, just prints it out.\\n\\\"\\\"\\\"\\n\\n    extract_task >> transform_task >> load_task\\n\\n# [END main_flow]\\n\\n# [END tutorial]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"tutorial_etl_dag","timeToRead":1,"banner":null}},"pageContext":{"slug":"/tutorial-etl-dag","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}