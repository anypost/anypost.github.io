{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-nested-branch-dag","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-nested-branch-dag","title":"example_nested_branch_dag","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_nested_branch_dag\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_nested_branch_dag\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"\\nExample DAG demonstrating a workflow with nested branching. The join tasks are created with\\n``none_failed_or_skipped`` trigger rule such that they are skipped whenever their corresponding\\n``BranchPythonOperator`` are skipped.\\n\\\"\\\"\\\"\\n\\nfrom airflow.models import DAG\\nfrom airflow.operators.dummy import DummyOperator\\nfrom airflow.operators.python import BranchPythonOperator\\nfrom airflow.utils.dates import days_ago\\n\\nwith DAG(\\n    dag_id=\\\"example_nested_branch_dag\\\", start_date=days_ago(2), schedule_interval=\\\"@daily\\\", tags=[\\\"example\\\"]\\n) as dag:\\n    branch_1 = BranchPythonOperator(task_id=\\\"branch_1\\\", python_callable=lambda: \\\"true_1\\\")\\n    join_1 = DummyOperator(task_id=\\\"join_1\\\", trigger_rule=\\\"none_failed_or_skipped\\\")\\n    true_1 = DummyOperator(task_id=\\\"true_1\\\")\\n    false_1 = DummyOperator(task_id=\\\"false_1\\\")\\n    branch_2 = BranchPythonOperator(task_id=\\\"branch_2\\\", python_callable=lambda: \\\"true_2\\\")\\n    join_2 = DummyOperator(task_id=\\\"join_2\\\", trigger_rule=\\\"none_failed_or_skipped\\\")\\n    true_2 = DummyOperator(task_id=\\\"true_2\\\")\\n    false_2 = DummyOperator(task_id=\\\"false_2\\\")\\n    false_3 = DummyOperator(task_id=\\\"false_3\\\")\\n\\n    branch_1 >> true_1 >> join_1\\n    branch_1 >> false_1 >> branch_2 >> [true_2, false_2] >> join_2 >> false_3 >> join_1\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_nested_branch_dag","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-nested-branch-dag","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}