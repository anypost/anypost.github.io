{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-kubernetes-executor","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-kubernetes-executor","title":"example_kubernetes_executor","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_kubernetes_executor\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_kubernetes_executor\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\\"\\\"\\\"\\nThis is an example dag for using the Kubernetes Executor.\\n\\\"\\\"\\\"\\nimport os\\n\\nfrom airflow import DAG\\nfrom airflow.example_dags.libs.helper import print_stuff\\nfrom airflow.operators.python import PythonOperator\\nfrom airflow.utils.dates import days_ago\\n\\nargs = {\\n    'owner': 'airflow',\\n}\\n\\nwith DAG(\\n    dag_id='example_kubernetes_executor',\\n    default_args=args,\\n    schedule_interval=None,\\n    start_date=days_ago(2),\\n    tags=['example', 'example2'],\\n) as dag:\\n\\n    affinity = {\\n        'podAntiAffinity': {\\n            'requiredDuringSchedulingIgnoredDuringExecution': [\\n                {\\n                    'topologyKey': 'kubernetes.io/hostname',\\n                    'labelSelector': {\\n                        'matchExpressions': [{'key': 'app', 'operator': 'In', 'values': ['airflow']}]\\n                    },\\n                }\\n            ]\\n        }\\n    }\\n\\n    tolerations = [{'key': 'dedicated', 'operator': 'Equal', 'value': 'airflow'}]\\n\\n    def assert_zip_binary():\\n        \\\"\\\"\\\"\\n        Checks whether Zip is installed.\\n\\n        :raises SystemError: if zip is not installed\\n        \\\"\\\"\\\"\\n        return_code = os.system(\\\"zip\\\")\\n        if return_code != 0:\\n            raise SystemError(\\\"The zip binary is not found\\\")\\n\\n    # You don't have to use any special KubernetesExecutor configuration if you don't want to\\n    start_task = PythonOperator(task_id=\\\"start_task\\\", python_callable=print_stuff)\\n\\n    # But you can if you want to\\n    one_task = PythonOperator(\\n        task_id=\\\"one_task\\\",\\n        python_callable=print_stuff,\\n        executor_config={\\\"KubernetesExecutor\\\": {\\\"image\\\": \\\"airflow/ci:latest\\\"}},\\n    )\\n\\n    # Use the zip binary, which is only found in this special docker image\\n    two_task = PythonOperator(\\n        task_id=\\\"two_task\\\",\\n        python_callable=assert_zip_binary,\\n        executor_config={\\\"KubernetesExecutor\\\": {\\\"image\\\": \\\"airflow/ci_zip:latest\\\"}},\\n    )\\n\\n    # Limit resources on this operator/task with node affinity & tolerations\\n    three_task = PythonOperator(\\n        task_id=\\\"three_task\\\",\\n        python_callable=print_stuff,\\n        executor_config={\\n            \\\"KubernetesExecutor\\\": {\\n                \\\"request_memory\\\": \\\"128Mi\\\",\\n                \\\"limit_memory\\\": \\\"128Mi\\\",\\n                \\\"tolerations\\\": tolerations,\\n                \\\"affinity\\\": affinity,\\n            }\\n        },\\n    )\\n\\n    # Add arbitrary labels to worker pods\\n    four_task = PythonOperator(\\n        task_id=\\\"four_task\\\",\\n        python_callable=print_stuff,\\n        executor_config={\\\"KubernetesExecutor\\\": {\\\"labels\\\": {\\\"foo\\\": \\\"bar\\\"}}},\\n    )\\n\\n    start_task >> [one_task, two_task, three_task, four_task]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_kubernetes_executor","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-kubernetes-executor","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}