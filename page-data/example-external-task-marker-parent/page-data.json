{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-external-task-marker-parent","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-external-task-marker-parent","title":"example_external_task_marker_parent","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_external_task_marker_parent\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_external_task_marker_parent\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"\\nExample DAG demonstrating setting up inter-DAG dependencies using ExternalTaskSensor and\\nExternalTaskMarker\\n\\nIn this example, child_task1 in example_external_task_marker_child depends on parent_task in\\nexample_external_task_marker_parent. When parent_task is cleared with \\\"Recursive\\\" selected,\\nthe presence of ExternalTaskMarker tells Airflow to clear child_task1 and its\\ndownstream tasks.\\n\\nExternalTaskSensor will keep poking for the status of remote ExternalTaskMarker task at a regular\\ninterval till one of the following will happen:\\n1. ExternalTaskMarker reaches the states mentioned in the allowed_states list\\n    In this case, ExternalTaskSensor will exit with a succes status code\\n2. ExternalTaskMarker reaches the states mentioned in the failed_states list\\n    In this case, ExternalTaskSensor will raise an AirflowException and user need to handle this\\n    with multiple downstream tasks\\n3. ExternalTaskSensor times out\\n    In this case, ExternalTaskSensor will raise AirflowSkipException or AirflowSensorTimeout\\n    exception\\n\\\"\\\"\\\"\\n\\nimport datetime\\n\\nfrom airflow import DAG\\nfrom airflow.operators.dummy import DummyOperator\\nfrom airflow.sensors.external_task import ExternalTaskMarker, ExternalTaskSensor\\n\\nstart_date = datetime.datetime(2015, 1, 1)\\n\\nwith DAG(\\n    dag_id=\\\"example_external_task_marker_parent\\\",\\n    start_date=start_date,\\n    schedule_interval=None,\\n    tags=['example2'],\\n) as parent_dag:\\n    # [START howto_operator_external_task_marker]\\n    parent_task = ExternalTaskMarker(\\n        task_id=\\\"parent_task\\\",\\n        external_dag_id=\\\"example_external_task_marker_child\\\",\\n        external_task_id=\\\"child_task1\\\",\\n    )\\n    # [END howto_operator_external_task_marker]\\n\\nwith DAG(\\n    dag_id=\\\"example_external_task_marker_child\\\",\\n    start_date=start_date,\\n    schedule_interval=None,\\n    tags=['example2'],\\n) as child_dag:\\n    # [START howto_operator_external_task_sensor]\\n    child_task1 = ExternalTaskSensor(\\n        task_id=\\\"child_task1\\\",\\n        external_dag_id=parent_dag.dag_id,\\n        external_task_id=parent_task.task_id,\\n        timeout=600,\\n        allowed_states=['success'],\\n        failed_states=['failed', 'skipped'],\\n        mode=\\\"reschedule\\\",\\n    )\\n    # [END howto_operator_external_task_sensor]\\n    child_task2 = DummyOperator(task_id=\\\"child_task2\\\")\\n    child_task1 >> child_task2\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_external_task_marker_parent","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-external-task-marker-parent","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}