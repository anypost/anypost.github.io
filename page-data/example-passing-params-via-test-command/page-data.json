{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/example-passing-params-via-test-command","result":{"data":{"post":{"__typename":"MdxPost","slug":"/example-passing-params-via-test-command","title":"example_passing_params_via_test_command","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"example_passing_params_via_test_command\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"example_passing_params_via_test_command\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"Example DAG demonstrating the usage of the params arguments in templated arguments.\\\"\\\"\\\"\\n\\nimport os\\nfrom datetime import timedelta\\n\\nfrom airflow import DAG\\nfrom airflow.operators.bash import BashOperator\\nfrom airflow.operators.python import PythonOperator\\nfrom airflow.utils.dates import days_ago\\n\\ndag = DAG(\\n    \\\"example_passing_params_via_test_command\\\",\\n    default_args={\\n        \\\"owner\\\": \\\"airflow\\\",\\n    },\\n    schedule_interval='*/1 * * * *',\\n    start_date=days_ago(1),\\n    dagrun_timeout=timedelta(minutes=4),\\n    tags=['example'],\\n)\\n\\n\\ndef my_py_command(test_mode, params):\\n    \\\"\\\"\\\"\\n    Print out the \\\"foo\\\" param passed in via\\n    `airflow tasks test example_passing_params_via_test_command run_this <date>\\n    -t '{\\\"foo\\\":\\\"bar\\\"}'`\\n    \\\"\\\"\\\"\\n    if test_mode:\\n        print(\\n            \\\" 'foo' was passed in via test={} command : kwargs[params][foo] \\\\\\n               = {}\\\".format(\\n                test_mode, params[\\\"foo\\\"]\\n            )\\n        )\\n    # Print out the value of \\\"miff\\\", passed in below via the Python Operator\\n    print(\\\" 'miff' was passed in via task params = {}\\\".format(params[\\\"miff\\\"]))\\n    return 1\\n\\n\\nmy_templated_command = \\\"\\\"\\\"\\n    echo \\\" 'foo was passed in via Airflow CLI Test command with value {{ params.foo }} \\\"\\n    echo \\\" 'miff was passed in via BashOperator with value {{ params.miff }} \\\"\\n\\\"\\\"\\\"\\n\\nrun_this = PythonOperator(\\n    task_id='run_this',\\n    python_callable=my_py_command,\\n    params={\\\"miff\\\": \\\"agg\\\"},\\n    dag=dag,\\n)\\n\\nalso_run_this = BashOperator(\\n    task_id='also_run_this',\\n    bash_command=my_templated_command,\\n    params={\\\"miff\\\": \\\"agg\\\"},\\n    dag=dag,\\n)\\n\\n\\ndef print_env_vars(test_mode):\\n    \\\"\\\"\\\"\\n    Print out the \\\"foo\\\" param passed in via\\n    `airflow tasks test example_passing_params_via_test_command env_var_test_task <date>\\n    --env-vars '{\\\"foo\\\":\\\"bar\\\"}'`\\n    \\\"\\\"\\\"\\n    if test_mode:\\n        print(\\\"foo={}\\\".format(os.environ.get('foo')))\\n        print(\\\"AIRFLOW_TEST_MODE={}\\\".format(os.environ.get('AIRFLOW_TEST_MODE')))\\n\\n\\nenv_var_test_task = PythonOperator(task_id='env_var_test_task', python_callable=print_env_vars, dag=dag)\\n\\nrun_this >> also_run_this\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"example_passing_params_via_test_command","timeToRead":1,"banner":null}},"pageContext":{"slug":"/example-passing-params-via-test-command","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}