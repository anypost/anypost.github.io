{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/tutorial","result":{"data":{"post":{"__typename":"MdxPost","slug":"/tutorial","title":"tutorial","date":"26.04.2021","tags":[{"name":"airflow","slug":"airflow"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"tutorial\",\n  \"date\": \"2021-04-26T00:00:00.000Z\",\n  \"tags\": [\"airflow\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"tutorial\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#\\n# Licensed to the Apache Software Foundation (ASF) under one\\n# or more contributor license agreements.  See the NOTICE file\\n# distributed with this work for additional information\\n# regarding copyright ownership.  The ASF licenses this file\\n# to you under the Apache License, Version 2.0 (the\\n# \\\"License\\\"); you may not use this file except in compliance\\n# with the License.  You may obtain a copy of the License at\\n#\\n#   http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing,\\n# software distributed under the License is distributed on an\\n# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n# KIND, either express or implied.  See the License for the\\n# specific language governing permissions and limitations\\n# under the License.\\n\\n\\\"\\\"\\\"\\n### Tutorial Documentation\\nDocumentation that goes along with the Airflow tutorial located\\n[here](https://airflow.apache.org/tutorial.html)\\n\\\"\\\"\\\"\\n# [START tutorial]\\n# [START import_module]\\nfrom datetime import timedelta\\n\\n# The DAG object; we'll need this to instantiate a DAG\\nfrom airflow import DAG\\n\\n# Operators; we need this to operate!\\nfrom airflow.operators.bash import BashOperator\\nfrom airflow.utils.dates import days_ago\\n\\n# [END import_module]\\n\\n# [START default_args]\\n# These args will get passed on to each operator\\n# You can override them on a per-task basis during operator initialization\\ndefault_args = {\\n    'owner': 'airflow',\\n    'depends_on_past': False,\\n    'email': ['airflow@example.com'],\\n    'email_on_failure': False,\\n    'email_on_retry': False,\\n    'retries': 1,\\n    'retry_delay': timedelta(minutes=5),\\n    # 'queue': 'bash_queue',\\n    # 'pool': 'backfill',\\n    # 'priority_weight': 10,\\n    # 'end_date': datetime(2016, 1, 1),\\n    # 'wait_for_downstream': False,\\n    # 'dag': dag,\\n    # 'sla': timedelta(hours=2),\\n    # 'execution_timeout': timedelta(seconds=300),\\n    # 'on_failure_callback': some_function,\\n    # 'on_success_callback': some_other_function,\\n    # 'on_retry_callback': another_function,\\n    # 'sla_miss_callback': yet_another_function,\\n    # 'trigger_rule': 'all_success'\\n}\\n# [END default_args]\\n\\n# [START instantiate_dag]\\ndag = DAG(\\n    'tutorial',\\n    default_args=default_args,\\n    description='A simple tutorial DAG',\\n    schedule_interval=timedelta(days=1),\\n    start_date=days_ago(2),\\n    tags=['example'],\\n)\\n# [END instantiate_dag]\\n\\n# t1, t2 and t3 are examples of tasks created by instantiating operators\\n# [START basic_task]\\nt1 = BashOperator(\\n    task_id='print_date',\\n    bash_command='date',\\n    dag=dag,\\n)\\n\\nt2 = BashOperator(\\n    task_id='sleep',\\n    depends_on_past=False,\\n    bash_command='sleep 5',\\n    retries=3,\\n    dag=dag,\\n)\\n# [END basic_task]\\n\\n# [START documentation]\\ndag.doc_md = __doc__\\n\\nt1.doc_md = \\\"\\\"\\\"\\\\\\n#### Task Documentation\\nYou can document your task using the attributes `doc_md` (markdown),\\n`doc` (plain text), `doc_rst`, `doc_json`, `doc_yaml` which gets\\nrendered in the UI's Task Instance Details page.\\n![img](http://montcs.bloomu.edu/~bobmon/Semesters/2012-01/491/import%20soul.png)\\n\\\"\\\"\\\"\\n# [END documentation]\\n\\n# [START jinja_template]\\ntemplated_command = \\\"\\\"\\\"\\n{% for i in range(5) %}\\n    echo \\\"{{ ds }}\\\"\\n    echo \\\"{{ macros.ds_add(ds, 7)}}\\\"\\n    echo \\\"{{ params.my_param }}\\\"\\n{% endfor %}\\n\\\"\\\"\\\"\\n\\nt3 = BashOperator(\\n    task_id='templated',\\n    depends_on_past=False,\\n    bash_command=templated_command,\\n    params={'my_param': 'Parameter I passed in'},\\n    dag=dag,\\n)\\n# [END jinja_template]\\n\\nt1 >> [t2, t3]\\n# [END tutorial]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"tutorial","timeToRead":1,"banner":null}},"pageContext":{"slug":"/tutorial","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}